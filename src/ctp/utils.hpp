#pragma once

#include <memory>

#include "../ctp_v6.7.2/ThostFtdcUserApiStruct.h"

namespace wss {

enum class Mode { None, FAK, FOK };

struct InstrumentData {
  /// 交易所代码
  std::string ExchangeID;
  /// 合约名称
  std::string InstrumentName;
  /// 产品类型
  std::string ProductClass;
  /// 交割年份
  int DeliveryYear;
  /// 交割月
  int DeliveryMonth;
  /// 市价单最大下单量
  int MaxMarketOrderVolume;
  /// 市价单最小下单量
  int MinMarketOrderVolume;
  /// 限价单最大下单量
  int MaxLimitOrderVolume;
  /// 限价单最小下单量
  int MinLimitOrderVolume;
  /// 合约数量乘数
  int VolumeMultiple;
  /// 最小变动价位
  double PriceTick;
  /// 创建日
  std::string CreateDate;
  /// 上市日
  std::string OpenDate;
  /// 到期日
  std::string ExpireDate;
  /// 开始交割日
  std::string StartDelivDate;
  /// 结束交割日
  std::string EndDelivDate;
  /// 合约生命周期状态
  std::string InstLifePhase;
  /// 当前是否交易
  int IsTrading;
  /// 持仓类型
  std::string PositionType;
  /// 持仓日期类型
  std::string PositionDateType;
  /// 多头保证金率
  double LongMarginRatio;
  /// 空头保证金率
  double ShortMarginRatio;
  /// 是否使用大额单边保证金算法
  std::string MaxMarginSideAlgorithm;
  /// 执行价
  double StrikePrice;
  /// 期权类型
  std::string OptionsType;
  /// 合约基础商品乘数
  double UnderlyingMultiple;
  /// 组合类型
  std::string CombinationType;
  /// 合约代码
  std::string InstrumentID;
  /// 合约在交易所的代码
  std::string ExchangeInstID;
  /// 产品代码
  std::string ProductID;
  /// 基础商品代码
  std::string UnderlyingInstrID;
};

std::shared_ptr<InstrumentData> toInstrumentData(
    CThostFtdcInstrumentField *pInstrument);

struct MarketData {
  /// 交易日
  std::string TradingDay;
  /// 交易所代码
  std::string ExchangeID;
  /// 最新价
  double LastPrice;
  /// 上次结算价
  double PreSettlementPrice;
  /// 昨收盘
  double PreClosePrice;
  /// 昨持仓量
  double PreOpenInterest;
  /// 今开盘
  double OpenPrice;
  /// 最高价
  double HighestPrice;
  /// 最低价
  double LowestPrice;
  /// 数量
  int Volume;
  /// 成交金额
  double Turnover;
  /// 持仓量
  double OpenInterest;
  /// 今收盘
  double ClosePrice;
  /// 本次结算价
  double SettlementPrice;
  /// 涨停板价
  double UpperLimitPrice;
  /// 跌停板价
  double LowerLimitPrice;
  /// 昨虚实度
  double PreDelta;
  /// 今虚实度
  double CurrDelta;
  /// 最后修改时间
  std::string UpdateTime;
  /// 最后修改毫秒
  int UpdateMillisec;
  /// 申买价一
  double BidPrice1;
  /// 申买量一
  int BidVolume1;
  /// 申卖价一
  double AskPrice1;
  /// 申卖量一
  int AskVolume1;
  /// 申买价二
  double BidPrice2;
  /// 申买量二
  int BidVolume2;
  /// 申卖价二
  double AskPrice2;
  /// 申卖量二
  int AskVolume2;
  /// 申买价三
  double BidPrice3;
  /// 申买量三
  int BidVolume3;
  /// 申卖价三
  double AskPrice3;
  /// 申卖量三
  int AskVolume3;
  /// 申买价四
  double BidPrice4;
  /// 申买量四
  int BidVolume4;
  /// 申卖价四
  double AskPrice4;
  /// 申卖量四
  int AskVolume4;
  /// 申买价五
  double BidPrice5;
  /// 申买量五
  int BidVolume5;
  /// 申卖价五
  double AskPrice5;
  /// 申卖量五
  int AskVolume5;
  /// 当日均价
  double AveragePrice;
  /// 业务日期
  std::string ActionDay;
  /// 合约代码
  std::string InstrumentID;
  /// 合约在交易所的代码
  std::string ExchangeInstID;
  /// 上带价
  double BandingUpperPrice;
  /// 下带价
  double BandingLowerPrice;
};

std::shared_ptr<MarketData> toMarketData(
    CThostFtdcDepthMarketDataField *pDepthMarketData);

}  // namespace wss
